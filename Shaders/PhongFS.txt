#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;
in vec3 LightPosJelly;  
in vec3 LightPosBulb;  
in vec2 TexCoord;


uniform sampler2D ourTexture;


vec3 objectColor = vec3 (0.6, 0.6, 1.0);


vec3 jellyFishLighting()
{
    vec3 lightColor = vec3 (0.9, 0.1, 0.9); //jellyfish

    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;    
    
     // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPosJelly - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor/3;
    
    // specular
    float specularStrength = 0.7;
    vec3 viewDir = normalize(-FragPos); // the viewer is always at (0,0,0) in view-space, so viewDir is (0,0,0) - Position => -Position
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor; 
    
    vec3 result = (ambient + diffuse + specular) * objectColor;
    return result;
}


vec3 bulbLighting()
{
    vec3 lightColor = vec3 (1.0, 1.0, 0.9);//bulb

    // ambient
    float ambientStrength = 0.3;
    vec3 ambient = ambientStrength * lightColor;    
    
     // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPosBulb - FragPos);
    float diff = max(dot(norm, lightDir), 0.0)/2;
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(-FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor; 
    
    vec3 result = (ambient + diffuse + specular) * objectColor;
    return result;
}

void main()
{
    vec3 result = vec3(0.0, 0.0, 0.0);
    result += jellyFishLighting();
    result +=  bulbLighting();
    FragColor = texture(ourTexture, TexCoord) * vec4(result, 1.0);  
}